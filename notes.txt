итак, два алгоритма сворачивания дальше:
1. вектор, по которому пришли, инвертируем (начальная точка в центре), поворачиваем по часовой стрелке не выходя из толщи фигуры, пока не упрёмся
2. вектор, по которому пришли, инвертируем (начальная точка в центре), поворачиваем против часовой стрелки, пока не упрёмся в фигуру
РЕЗУЛЬТАТЫ РАЗНЫЕ и требуют разных алгоритмов нахождения дырок и разных алгоритмов связности. второй требует, чтобы мы рассматривали дырку, соединённую с наружой по одной точке, как отдельный контур, а две фигуры, соединённые в одной точке, как один контур; первый - чтобы мы такие дырки рассматривали как часть наружи, а такие две фигуры как два контура.
в нашем экшнскрипте был алгоритм начинания в любой точке с каким-то мешком всех векторов, сходящихся в точке. я его не помню

с шифтом можно сдвигать в промежуточные невалидные состояния (или чекбокс специальные)
а про отпускании возвращать как было

import matplotlib.pyplot as plt
# contour of shape [(1,2),(3,4),(5,6),(1,2)]
x, y = np.array(contour).T
plt.quiver(x[:-1], y[:-1], np.diff(x), np.diff(y))
plt.show()


итак, redactor_diag.py
надо: во втором окне сделать экспорт
если моя интуиция верна, из квадруплов только стыки углов, где "куда идти" зависит от "откуда пришёл", про них думать отдельно, как сделать элегантно

ещё: первая точка должна быть такой, чтобы не требовалось знание "откуда пришёл". как её найти. что будет, если мы начнём не с неё. _по идее_, если мы начнём с точки-стыка, мы можем выбрать любое из двух допустимых направлений. а вот если она не в самом начале, то смотреть уже надо, чтобы не зациклиться

и переработай fill, чтобы превращал, скажем, 3 в 5 при заполнении 5
и переработай первоначальное нахождение [(j,i)], чтобы не очутиться в пустоте
и, главное, все эти 256 состояний, некоторые ещё и с ветвлениями
а затем всё читай ещё раз и тестируй
и протестируй несвязные фигуры или больше одной дыры


надо: ха, забавно. 8, первый кусок. их в теории можно воткнуть друг в друга, но аж никак не поклеточным сдвигом. это нас ограничивает

вообще про ленивые редакторы:
надо: подумать про кнопки типа "предыдущая" и "прыгнуть вперёд на эн", это же касается и ленивого редактора без диагоналей (спроси куклева)

вообще про все:
возможно, переключатель между "с диагоналями и без" (сейчас для этого достаточно только заменить range(6) на [0,5] внутри polyominoes)
и между ленивым и трудолюбивым. это позволит их все свести воедино. возможно, нампай таки следует использовать, но по уму, с уфунками
возможно, кешировать весь список для отдельных эн во что-то типа sqlite или пикля
рефакторить: в поворотах-отражениях есть копипаст

однажды в перспективе и отдельным файлом: шестиугольники, треугольники, ромбы

кодирование состояний четырёхугольной клетки с диагоналями (из них генератор генерирует только 0 1 2 3 4 5, но 6 и 7 могут возникнуть при наложении)
'__'	0
'|/'	1
'/|'	2
'\|'	3
'|\'	4
'|_|'	5
'|/|' 6
'|\|' 7
никакой математической красоты тут искать не следует


в этих квадруплах есть не только двойные стыки, но и тройные, и, скажем, четверные (3,2,1,4) и (4,1,2,4)
 (0, 0, 1, 3),
 (0, 0, 1, 4),
 (0, 0, 1, 5),
 (0, 0, 2, 3),
 (0, 0, 5, 3),
 (0, 1, 0, 3),
 (0, 1, 0, 4),
 (0, 1, 0, 5),
 (0, 1, 1, 0),
 (0, 1, 1, 3),
 (0, 1, 1, 4),
 (0, 1, 1, 5),
 (0, 1, 2, 0),
 (0, 1, 2, 3),
 (0, 1, 2, 4),
 (0, 1, 2, 5),
 (0, 1, 5, 0),
 (0, 1, 5, 3),
 (0, 1, 5, 4),
 (0, 1, 5, 5),
 (0, 2, 0, 4),
 (0, 2, 1, 0),
 (0, 2, 1, 3),
 (0, 2, 1, 4),
 (0, 2, 1, 5),
 (0, 2, 2, 0),
 (0, 2, 2, 3),
 (0, 2, 2, 4),
 (0, 2, 5, 0),
 (0, 2, 5, 3),
 (0, 2, 5, 4),
 (0, 5, 0, 4),
 (0, 5, 1, 0),
 (0, 5, 1, 3),
 (0, 5, 1, 4),
 (0, 5, 1, 5),
 (0, 5, 2, 0),
 (0, 5, 2, 3),
 (0, 5, 2, 4),
 (0, 5, 5, 0),
 (0, 5, 5, 3),
 (0, 5, 5, 4),
 (3, 0, 0, 3),
 (3, 0, 0, 4),
 (3, 0, 0, 5),
 (3, 0, 1, 0),
 (3, 0, 1, 3),
 (3, 0, 1, 4),
 (3, 0, 1, 5),
 (3, 0, 2, 0),
 (3, 0, 2, 3),
 (3, 0, 2, 4),
 (3, 0, 2, 5),
 (3, 0, 5, 0),
 (3, 0, 5, 3),
 (3, 0, 5, 4),
 (3, 0, 5, 5),
 (3, 1, 0, 3),
 (3, 1, 0, 4),
 (3, 1, 0, 5),
 (3, 1, 1, 0),
 (3, 1, 1, 3),
 (3, 1, 1, 4),
 (3, 1, 1, 5),
 (3, 1, 2, 0),
 (3, 1, 2, 3),
 (3, 1, 2, 4),
 (3, 1, 2, 5),
 (3, 1, 5, 0),
 (3, 1, 5, 3),
 (3, 1, 5, 4),
 (3, 1, 5, 5),
 (3, 2, 0, 0),
 (3, 2, 0, 3),
 (3, 2, 0, 4),
 (3, 2, 0, 5),
 (3, 2, 1, 0),
 (3, 2, 1, 3),
 (3, 2, 1, 4),
 (3, 2, 1, 5),
 (3, 2, 2, 0),
 (3, 2, 2, 3),
 (3, 2, 2, 4),
 (3, 2, 2, 5),
 (3, 2, 5, 0),
 (3, 2, 5, 3),
 (3, 2, 5, 4),
 (3, 2, 5, 5),
 (3, 5, 0, 4),
 (3, 5, 1, 0),
 (3, 5, 1, 3),
 (3, 5, 1, 4),
 (3, 5, 1, 5),
 (3, 5, 2, 0),
 (3, 5, 2, 3),
 (3, 5, 2, 4),
 (3, 5, 5, 0),
 (3, 5, 5, 3),
 (3, 5, 5, 4),
 (4, 0, 0, 3),
 (4, 0, 0, 4),
 (4, 0, 0, 5),
 (4, 0, 1, 3),
 (4, 0, 1, 4),
 (4, 0, 1, 5),
 (4, 0, 2, 0),
 (4, 0, 2, 3),
 (4, 0, 2, 4),
 (4, 0, 2, 5),
 (4, 0, 5, 3),
 (4, 1, 0, 0),
 (4, 1, 0, 3),
 (4, 1, 0, 4),
 (4, 1, 0, 5),
 (4, 1, 1, 0),
 (4, 1, 1, 3),
 (4, 1, 1, 4),
 (4, 1, 1, 5),
 (4, 1, 2, 0),
 (4, 1, 2, 3),
 (4, 1, 2, 4),
 (4, 1, 2, 5),
 (4, 1, 5, 0),
 (4, 1, 5, 3),
 (4, 1, 5, 4),
 (4, 1, 5, 5),
 (4, 2, 0, 0),
 (4, 2, 0, 3),
 (4, 2, 0, 4),
 (4, 2, 0, 5),
 (4, 2, 1, 0),
 (4, 2, 1, 3),
 (4, 2, 1, 4),
 (4, 2, 1, 5),
 (4, 2, 2, 0),
 (4, 2, 2, 3),
 (4, 2, 2, 4),
 (4, 2, 2, 5),
 (4, 2, 5, 0),
 (4, 2, 5, 3),
 (4, 2, 5, 4),
 (4, 5, 0, 0),
 (4, 5, 0, 3),
 (4, 5, 0, 4),
 (4, 5, 0, 5),
 (4, 5, 1, 0),
 (4, 5, 1, 3),
 (4, 5, 1, 4),
 (4, 5, 1, 5),
 (4, 5, 2, 0),
 (4, 5, 2, 3),
 (4, 5, 2, 4),
 (4, 5, 2, 5),
 (4, 5, 5, 0),
 (4, 5, 5, 3),
 (4, 5, 5, 4),
 (5, 0, 0, 3),
 (5, 0, 0, 4),
 (5, 0, 0, 5),
 (5, 0, 1, 3),
 (5, 0, 1, 4),
 (5, 0, 1, 5),
 (5, 0, 2, 0),
 (5, 0, 2, 3),
 (5, 0, 2, 4),
 (5, 0, 2, 5),
 (5, 0, 5, 3),
 (5, 1, 0, 3),
 (5, 1, 0, 4),
 (5, 1, 0, 5),
 (5, 1, 1, 3),
 (5, 1, 1, 4),
 (5, 1, 1, 5),
 (5, 1, 2, 0),
 (5, 1, 2, 3),
 (5, 1, 2, 4),
 (5, 1, 2, 5),
 (5, 1, 5, 3),
 (5, 2, 0, 0),
 (5, 2, 0, 3),
 (5, 2, 0, 4),
 (5, 2, 0, 5),
 (5, 2, 1, 0),
 (5, 2, 1, 3),
 (5, 2, 1, 4),
 (5, 2, 1, 5),
 (5, 2, 2, 0),
 (5, 2, 2, 3),
 (5, 2, 2, 4),
 (5, 2, 2, 5),
 (5, 2, 5, 0),
 (5, 2, 5, 3),
 (5, 2, 5, 4),
 (5, 5, 0, 4),
 (5, 5, 1, 4),
 (5, 5, 2, 0),
 (5, 5, 2, 3),
 (5, 5, 2, 4),